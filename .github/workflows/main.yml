name: CI

on:
  push:
    branches:
      - main
  pull_request:
  release:
    types: [published]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: he0119/setup-python@main
        with:
          python-version: "3.11"

      - name: Install prerequisites
        run: poetry install

      - name: Run tests
        run: poetry run pytest --cov=src --cov-report xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  docker:
    name: Docker
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Tags
        uses: docker/metadata-action@v5
        id: metadata
        with:
          images: ghcr.io/nonebot/noneflow
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch

      - name: Build and Publish
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}

  github-relase:
    name: GitHub release
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Tag Name
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Upload Files
        run: gh release upload --clobber ${{ env.TAG_NAME }} src/utils/plugin_test.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
